import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:gtec/models/super_admin_model.dart';
import 'package:http/http.dart' as http;

class SuperAdminAPI {
  final String baseUrl = 'https://api.portfoliobuilders.in/api/superadmin';

  Future<http.Response> loginSuperAdminAPI(String email, String password) async {
    final url = Uri.parse('$baseUrl/login');
    return await http.post(
      url,
      headers: {'Content-Type': 'application/json'},
      body: jsonEncode({'email': email, 'password': password}),
    );
  }

Future<List<coursemodel>> fetchCoursesAPI(String token) async {
  final url = Uri.parse('$baseUrl/getAllCourses');
  try {
    final response = await http.get(
      url,
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer $token',
      },
    );

    print('Status Code: ${response.statusCode}');
    print('Response Body: ${response.body}');

    if (response.statusCode == 200) {
      final List<dynamic> courses = jsonDecode(response.body)['courses'];
      return courses.map((item) => coursemodel.fromJson(item)).toList();
    } else {
      throw Exception('Failed to fetch courses: ${response.body}');
    }
  } catch (e) {
    print('Error: $e');
    rethrow;
  }
}


  Future<String> createCourseAPI(String title, String description, String token) async {
    final url = Uri.parse('$baseUrl/createCourse');
    final response = await http.post(
      url,
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer $token',
      },
      body: jsonEncode({'title': title, 'description': description}),
    );

    if (response.statusCode == 200 || response.statusCode == 201) {
      return response.body;
    } else {
      throw Exception('Failed to create course: ${response.reasonPhrase}');
    }
  }


Future<List<Modulemodel>> fetchmodulesAPI(String token ,int courseId,) async {
  final url = Uri.parse('$baseUrl/getAllModules/$courseId');
  try {
    final response = await http.get(
      url,
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer $token',
      },
    );

    print('Status Code: ${response.statusCode}');
    print('Response Body: ${response.body}');

    if (response.statusCode == 200) {
      final List<dynamic> modules = jsonDecode(response.body)['modules'];
      return modules.map((item) => Modulemodel.fromJson(item)).toList();
    } else {
      throw Exception('Failed to fetch courses: ${response.body}');
    }
  } catch (e) {
    print('Error: $e');
    rethrow;
  }
}

 Future<String> createmoduleAPI(String token, int courseId, String content, String title) async {
  final url = Uri.parse('$baseUrl/createModule');
  final response = await http.post(
    url,
    headers: {
      'Content-Type': 'application/json',
      'Authorization': 'Bearer $token',
    },
    body: jsonEncode({'courseId': courseId, 'title': title, 'content': content}),
  );

  if (response.statusCode == 200 || response.statusCode == 201) {
    print('Module created successfully: ${response.body}');  // Log the response body
    return response.body;
  } else {
    print('Failed to create module: ${response.reasonPhrase}');  // Log failure reason
    throw Exception('Failed to create module: ${response.reasonPhrase}');
  }
}

Future<List<Lessonmodel>> fetchlessonsAPI(String token ,int courseId,int moduleId) async {
  final url = Uri.parse('$baseUrl/getAllLessons/$courseId/$moduleId');
  try {
    final response = await http.get(
      url,
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer $token',
      },
    );

    print('Status Code: ${response.statusCode}');
    print('Response Body: ${response.body}');

    if (response.statusCode == 200) {
      final List<dynamic> lessons = jsonDecode(response.body)['lessons'];
      return lessons.map((item) => Lessonmodel.fromJson(item)).toList();
    } else {
      throw Exception('Failed to fetch courses: ${response.body}');
    }
  } catch (e) {
    print('Error: $e');
    rethrow;
  }
}


}


























